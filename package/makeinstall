#!/bin/sh -e
# See http://skarnet.org./software/compile.html
if [ \! -d package -o \! -d source ]
then
	echo "You are not in the right directory." 1>&2
	exit 100
fi

# Atomically update the release directories ./command, ./library, ./include, and so forth.
# The build and release directories need not be on the same disc volume.
# And the files released must not be potentially overwritable and truncatable by the compiler/linker during subsequent builds.
# But released files can be links to other released files, of course.
mkdir -p command manual config guide

# ##############################################################################
# Build all of the ...{new} files in ./command and ./manual.
cat package/commands1 package/commands8 | while read i
do
	rm -f -- command/"$i"{new}
	cp -p -f -- build/"$i" command/"$i"{new}
	strip -p -- command/"$i"{new}
done
cat package/aliases1 package/aliases8 | while read command alias
do
	rm -f -- command/"${alias}"{new}
	ln -f -- command/"${command}"{new} command/"${alias}"{new}
done
(
	cat package/commands1
	awk '{ if ($1 == "exec" || $1 == "session-manager" || $1 == "console-terminal-emulator") print $2 ; }' package/aliases1
	awk '{ if ($1 == "service-control" && $2 != "svc") print $2 ; }' package/aliases1
) | while read i
do
	rm -f -- manual/"$i".1{new}
	cp -p -f -- build/"$i".1 manual/"$i".1{new}
done
(
	cat package/commands8
) | while read i
do
	rm -f -- manual/"$i".8{new}
	cp -p -f -- build/"$i".8 manual/"$i".8{new}
done
(
	awk '{ if ($1 != "exec" && $1 != "session-manager" && $1 != "console-terminal-emulator" && $1 != "service-control") print $0 ; }' package/aliases1
	awk '{ if ($1 == "service-control" && $2 == "svc") print $0 ; }' package/aliases1
) | while read command alias
do
	ln -f -s -- "${command}".1 manual/"${alias}".1{new}
done
while read command alias
do
	ln -f -s -- "${command}".8 manual/"${alias}".8{new}
done < package/aliases8
(
	cat package/guidepages package/commands1 package/commands8
	awk '{ if ($1 == "exec" || $1 == "session-manager" || $1 == "console-terminal-emulator") print $2 ; }' package/aliases1
	awk '{ if ($1 == "service-control" && $2 != "svc") print $2 ; }' package/aliases1
) | while read i
do
	rm -f -- guide/"$i".html{new}
	cp -p -f -- build/"$i".html guide/"$i".html{new}
done
(
	cat package/aliases8
	awk '{ if ($1 != "exec" && $1 != "session-manager" && $1 != "console-terminal-emulator" && $1 != "service-control") print $0 ; }' package/aliases1
	awk '{ if ($1 == "service-control" && $2 == "svc") print $0 ; }' package/aliases1
) | while read command alias
do
	ln -f -s -- "${command}".html guide/"${alias}".html{new}
done

# ##############################################################################
# Rename the ...{new} files in ./command and ./manual.
(
	cat package/commands1 package/commands8
	awk '{ if ($1 == "exec" || $1 == "session-manager" || $1 == "console-terminal-emulator") print $2 ; }' package/aliases1
	awk '{ if ($1 == "service-control" && $2 != "svc") print $2 ; }' package/aliases1
) | while read i
do
	mv -f -- command/"$i"{new} command/"$i"
done
(
	cat package/commands1
	awk '{ if ($1 == "exec" || $1 == "session-manager" || $1 == "console-terminal-emulator") print $2 ; }' package/aliases1
	awk '{ if ($1 == "service-control" && $2 != "svc") print $2 ; }' package/aliases1
) | while read i
do
	mv -f -- manual/"$i".1{new} manual/"$i".1
done
while read i
do
	mv -f -- manual/"$i".8{new} manual/"$i".8
done < package/commands8
(
	awk '{ if ($1 != "exec" && $1 != "session-manager" && $1 != "console-terminal-emulator" && $1 != "service-control") print $0 ; }' package/aliases1
	awk '{ if ($1 == "service-control" && $2 == "svc") print $0 ; }' package/aliases1
) | while read command alias
do
	mv -f -- manual/"${alias}".1{new} manual/"${alias}".1
	mv -f -- command/"${alias}"{new} command/"${alias}"
done
while read command alias
do
	mv -f -- manual/"${alias}".8{new} manual/"${alias}".8
	mv -f -- command/"${alias}"{new} command/"${alias}"
done < package/aliases8
(
	cat package/guidepages package/commands1 package/commands8
	awk '{ if ($1 == "exec" || $1 == "session-manager" || $1 == "console-terminal-emulator") print $2 ; }' package/aliases1
	awk '{ if ($1 == "service-control" && $2 != "svc") print $2 ; }' package/aliases1
) | while read i
do
	mv -f -- guide/"$i".html{new} guide/"$i".html
done
(
	cat package/aliases8
	awk '{ if ($1 != "exec" && $1 != "session-manager" && $1 != "console-terminal-emulator" && $1 != "service-control") print $0 ; }' package/aliases1
	awk '{ if ($1 == "service-control" && $2 == "svc") print $0 ; }' package/aliases1
) | while read command alias
do
	mv -f -- guide/"${alias}".html{new} guide/"${alias}".html
done

# ##############################################################################
# Build all of the {new} directories in ./config.
rm -rf -- config/targets{new} config/services{new}
mkdir -p config/targets{new} config/services{new}
while read i
do
	command/system-control convert-systemd-units --bundle-root config/targets{new}/ build/$i.target
done < package/standard-targets
while read i
do
	command/system-control convert-systemd-units --bundle-root config/services{new}/ --unescape-instance build/mount@$i.service
	ln -s ../sysinit-log config/services{new}/mount@$i/log
	command/system-control convert-systemd-units --bundle-root config/services{new}/ --unescape-instance build/fsck@$i.service
	ln -s ../sysinit-log config/services{new}/fsck@$i/log
done < package/sysinit-mounts
cat package/common-services package/bsd-services package/sysinit-services |
while read i
do
	command/system-control convert-systemd-units --bundle-root config/services{new}/ build/$i.service
done
cat package/kernel-vt-services package/user-vt-services package/bsd-ttys package/linux-ttys package/common-ttys |
while read i
do
	command/system-control convert-systemd-units --bundle-root config/services{new}/ --unescape-instance build/$i.service
done
cat package/common-sockets package/bsd-sockets |
while read i
do
	command/system-control convert-systemd-units --bundle-root config/services{new}/ build/$i.socket
done
while read i
do
	ln -s ../sysinit-log config/services{new}/$i/log
done < package/sysinit-services
cat package/common-services package/common-sockets package/bsd-services package/bsd-sockets package/kernel-vt-services package/user-vt-services |
while read I
do
	command/system-control convert-systemd-units --bundle-root config/services{new}/ --alt-escape build/cyclog@"$I".service
	ln -s ../cyclog@$I config/services{new}/$I/log
done
cat package/common-ttys package/bsd-ttys package/linux-ttys |
while read I
do
	command/system-control convert-systemd-units --bundle-root config/services{new}/ --alt-escape build/cyclog@"$I".service
	ln -s ../cyclog@$I config/services{new}/$I/log
done
for i in 1 2 3 ; do ln -s -- /run/dev/vc"$i" config/services{new}/console-multiplexor@head0/service/ ; done
mkdir -m 0755 config/services{new}/console-fb-realizer@head0/service/kbdmaps
mkdir -m 0755 config/services{new}/console-fb-realizer@head0/service/fonts
ln -s -- kbdmaps/us.kbdmap config/services{new}/console-fb-realizer@head0/service/kbdmap
case "`uname`" in
Linux) ln -s /dev/fb0 config/services{new}/console-fb-realizer@head0/service/fb ; ln -s /dev/input/event0 config/services{new}/console-fb-realizer@head0/service/event ;;
*BSD) ln -s /dev/ttyv0 config/services{new}/console-fb-realizer@head0/service/fb ; ln -s /dev/ttyv0 config/services{new}/console-fb-realizer@head0/service/event ;;
esac
ln -s ../../ttylogin@tty1 ../../ttylogin@ttyv0 config/services{new}/console-fb-realizer@head0/conflicts/
rm -f -- config/services{new}/sysinit-log/log
rm -f -- config/services{new}/devd/log
ln -s ../devd-log config/services{new}/devd/log
fgrep -l "envdir env" config/services{new}/*/service/run |
sed -e 's/run$/env/' |
xargs mkdir -m 0755 --

# ##############################################################################
# Build all of the {new} files in ./config.
cat package/systemd-services package/tmpfiles-snippets |
while read i
do
	rm -f -- config/"$i"{new}
	cp -p -f -- build/"$i" config/"$i"{new}
done

# ##############################################################################
# Rename the ...{new} directories and files in ./config.
cat package/systemd-services package/tmpfiles-snippets |
while read i
do
	mv -f -- config/"$i"{new} config/"$i"
done 
for i in targets services
do
	test -e config/"$i" && mv -f -- config/"$i" config/"$i"{old}
	mv -f -- config/"$i"{new} config/"$i"
	rm -rf -- config/"$i"{old}
done
