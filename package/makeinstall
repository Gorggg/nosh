#!/bin/sh -e
# See http://skarnet.org./software/compile.html
if [ \! -d package -o \! -d source ]
then
	echo "You are not in the right directory." 1>&2
	exit 100
fi

# Atomically update the release directories ./command, ./library, ./include, and so forth.
# The build and release directories need not be on the same disc volume.
# And the files released must not be potentially overwritable and truncatable by the compiler/linker during subsequent builds.
# But released files can be links to other released files, of course.
mkdir -p command manual config guide

# ##############################################################################
# Build all of the ...{new} files in ./command and ./manual.
cat package/commands1 package/commands8 | while read i
do
	rm -f -- command/"$i"{new}
	cp -p -f -- build/"$i" command/"$i"{new}
	strip -p -- command/"$i"{new}
done
cat package/aliases1 package/aliases8 | while read command alias
do
	rm -f -- command/"${alias}"{new}
	ln -f -- command/"${command}"{new} command/"${alias}"{new}
done
(
	# All of the commands that have their own manual pages
	cat package/commands1
	awk '{ if ($1 == "exec" || $1 == "console-terminal-emulator") print $2 ; }' package/aliases1
	awk '{ if ($1 == "system-control" && $2 != "systemctl") print $2 ; }' package/aliases1
	awk '{ if ($1 == "service-control" && $2 != "svc") print $2 ; }' package/aliases1
) | while read i
do
	rm -f -- manual/"$i".1{new}
	cp -p -f -- build/"$i".1 manual/"$i".1{new}
done
(
	# All of the commands that have their own manual pages
	cat package/commands8
) | while read i
do
	rm -f -- manual/"$i".8{new}
	cp -p -f -- build/"$i".8 manual/"$i".8{new}
done
(
	# Aliased manual pages
	awk '{ if ($1 != "exec" && $1 != "console-terminal-emulator" && $1 != "system-control" && $1 != "service-control") print $0 ; }' package/aliases1
	awk '{ if ($1 == "system-control" && $2 == "systemctl") print $0 ; }' package/aliases1
	awk '{ if ($1 == "service-control" && $2 == "svc") print $0 ; }' package/aliases1
) | while read command alias
do
	ln -f -s -- "${command}".1 manual/"${alias}".1{new}
done
while read command alias
do
	ln -f -s -- "${command}".8 manual/"${alias}".8{new}
	# Aliased manual pages
done < package/aliases8
(
	# All of the commands that have their own manual pages
	cat package/guidepages package/commands1 package/commands8
	awk '{ if ($1 == "exec" || $1 == "console-terminal-emulator") print $2 ; }' package/aliases1
	awk '{ if ($1 == "system-control" && $2 != "systemctl") print $2 ; }' package/aliases1
	awk '{ if ($1 == "service-control" && $2 != "svc") print $2 ; }' package/aliases1
) | while read i
do
	rm -f -- guide/"$i".html{new}
	cp -p -f -- build/"$i".html guide/"$i".html{new}
done
(
	# Aliased manual pages
	cat package/aliases8
	awk '{ if ($1 != "exec" && $1 != "console-terminal-emulator" && $1 != "system-control" && $1 != "service-control") print $0 ; }' package/aliases1
	awk '{ if ($1 == "system-control" && $2 == "systemctl") print $0 ; }' package/aliases1
	awk '{ if ($1 == "service-control" && $2 == "svc") print $0 ; }' package/aliases1
) | while read command alias
do
	ln -f -s -- "${command}".html guide/"${alias}".html{new}
done

# ##############################################################################
# Rename the ...{new} files in ./command and ./manual.
(
	cat package/commands1 package/commands8
	awk '{ if ($1 == "exec" || $1 == "console-terminal-emulator") print $2 ; }' package/aliases1
	awk '{ if ($1 == "system-control" && $2 != "systemctl") print $2 ; }' package/aliases1
	awk '{ if ($1 == "service-control" && $2 != "svc") print $2 ; }' package/aliases1
) | while read i
do
	mv -f -- command/"$i"{new} command/"$i"
done
(
	cat package/commands1
	awk '{ if ($1 == "exec" || $1 == "console-terminal-emulator") print $2 ; }' package/aliases1
	awk '{ if ($1 == "system-control" && $2 != "systemctl") print $2 ; }' package/aliases1
	awk '{ if ($1 == "service-control" && $2 != "svc") print $2 ; }' package/aliases1
) | while read i
do
	mv -f -- manual/"$i".1{new} manual/"$i".1
done
while read i
do
	mv -f -- manual/"$i".8{new} manual/"$i".8
done < package/commands8
(
	awk '{ if ($1 != "exec" && $1 != "console-terminal-emulator" && $1 != "system-control" && $1 != "service-control") print $0 ; }' package/aliases1
	awk '{ if ($1 == "system-control" && $2 == "systemctl") print $0 ; }' package/aliases1
	awk '{ if ($1 == "service-control" && $2 == "svc") print $0 ; }' package/aliases1
) | while read command alias
do
	mv -f -- manual/"${alias}".1{new} manual/"${alias}".1
	mv -f -- command/"${alias}"{new} command/"${alias}"
done
while read command alias
do
	mv -f -- manual/"${alias}".8{new} manual/"${alias}".8
	mv -f -- command/"${alias}"{new} command/"${alias}"
done < package/aliases8
(
	cat package/guidepages package/commands1 package/commands8
	awk '{ if ($1 == "exec" || $1 == "console-terminal-emulator") print $2 ; }' package/aliases1
	awk '{ if ($1 == "system-control" && $2 != "systemctl") print $2 ; }' package/aliases1
	awk '{ if ($1 == "service-control" && $2 != "svc") print $2 ; }' package/aliases1
) | while read i
do
	mv -f -- guide/"$i".html{new} guide/"$i".html
done
(
	cat package/aliases8
	awk '{ if ($1 != "exec" && $1 != "console-terminal-emulator" && $1 != "system-control" && $1 != "service-control") print $0 ; }' package/aliases1
	awk '{ if ($1 == "system-control" && $2 == "systemctl") print $0 ; }' package/aliases1
	awk '{ if ($1 == "service-control" && $2 == "svc") print $0 ; }' package/aliases1
) | while read command alias
do
	mv -f -- guide/"${alias}".html{new} guide/"${alias}".html
done

# ##############################################################################
# Build all of the {new} directories in ./config.
rm -rf -- config/targets{new} config/services{new}
mkdir -p config/targets{new} config/services{new}
while read i
do
	cp -a build/targets/$i config/targets{new}/
done < package/standard-targets
while read i
do
	cp -a build/services/mount@$i config/services{new}/
	cp -a build/services/fsck@$i config/services{new}/
done < package/sysinit-mounts
cat package/common-sysinit-services package/bsd-sysinit-services package/linux-sysinit-services |
while read i
do
	cp -a build/services/$i config/services{new}/
done
cat package/common-services package/bsd-services package/linux-services package/common-sockets package/bsd-sockets package/linux-sockets package/common-ttys package/bsd-ttys package/linux-ttys |
while read i
do
	cp -a build/services/$i config/services{new}/
	cp -a build/services/cyclog@$i config/services{new}/
done

# ##############################################################################
# Build all of the {new} files in ./config.
cat package/systemd-services package/tmpfiles-snippets package/systemd-presets |
while read i
do
	rm -f -- config/"$i"{new}
	cp -p -f -- build/systemd/"$i" config/"$i"{new}
done
(
for i in bundles run-via-systemd run-virtualbox-guest run-freedesktop-kits run-user-vt run-kernel-vt
do
	cat package/common-nosh-"$i"-presets package/linux-nosh-"$i"-presets package/bsd-nosh-"$i"-presets 
done
) | while read i
do
	rm -f -- config/"$i"{new}
	cp -p -f -- build/presets/"$i" config/"$i"{new}
done

# ##############################################################################
# Rename the ...{new} directories and files in ./config.
(
cat package/systemd-services package/tmpfiles-snippets package/systemd-presets 
for i in bundles run-via-systemd run-virtualbox-guest run-freedesktop-kits run-user-vt run-kernel-vt
do
	cat package/common-nosh-"$i"-presets package/linux-nosh-"$i"-presets package/bsd-nosh-"$i"-presets 
done
) | while read i
do
	mv -f -- config/"$i"{new} config/"$i"
done 
for i in targets services
do
	test -e config/"$i" && mv -f -- config/"$i" config/"$i"{old}
	mv -f -- config/"$i"{new} config/"$i"
	rm -rf -- config/"$i"{old}
done
