/* COPYING ******************************************************************
For copyright and licensing terms, see the file named COPYING.
// **************************************************************************
*/

#if !defined(INCLUDE_INPUTMESSAGE_H)
#define INCLUDE_INPUTMESSAGE_H

#include <stdint.h>

enum {
	INPUT_MSG_MASK		= 0xFF000000,
	INPUT_MSG_UCS24		= 0x01000000,
	INPUT_MSG_EKEY		= 0x0E000000,
	INPUT_MSG_FKEY		= 0x0F000000,
};

enum {
	INPUT_MODIFIER_SHIFT	= (1U << 0U),
	INPUT_MODIFIER_CONTROL	= (1U << 1U),
	INPUT_MODIFIER_ALT	= (1U << 2U),
	INPUT_MODIFIER_META	= (1U << 3U),
};

// These values are intentionally the same as USB keyboard HID codes.
// However, clearly there are a lot more editing and application keys in the termcap model than in the USB model.
enum {
	// Non-glyph main keypad keys
 	EXTENDED_KEY_RETURN_OR_ENTER	= 0x0028,
 	EXTENDED_KEY_ESCAPE		= 0x0029,
 	EXTENDED_KEY_BACKSPACE		= 0x002A,
 	EXTENDED_KEY_TAB		= 0x002B,
 	EXTENDED_KEY_BACKTAB		= 0x0F2B,	// non-USB

	// Editing keypad
 	EXTENDED_KEY_INSERT		= 0x0049,	// insert/replace toggle
 	EXTENDED_KEY_INS_CHAR		= 0x0E49,	// non-USB
 	EXTENDED_KEY_INS_LINE		= 0x0F49,	// non-USB
 	EXTENDED_KEY_HOME		= 0x004A,
 	EXTENDED_KEY_PAGE_UP		= 0x004B,
 	EXTENDED_KEY_DELETE		= 0x004C,
 	EXTENDED_KEY_DEL_CHAR		= 0x0E4C,	// non-USB
 	EXTENDED_KEY_DEL_LINE		= 0x0F4C,	// non-USB
 	EXTENDED_KEY_END		= 0x004D,
 	EXTENDED_KEY_PAGE_DOWN		= 0x004E,
 	EXTENDED_KEY_RIGHT_ARROW	= 0x004F,
 	EXTENDED_KEY_LEFT_ARROW		= 0x0050,
 	EXTENDED_KEY_DOWN_ARROW		= 0x0051,
 	EXTENDED_KEY_UP_ARROW		= 0x0052,
 	EXTENDED_KEY_CENTER		= 0x0F5D,	// non-USB
 	EXTENDED_KEY_LL_ARROW		= 0x0F59,	// non-USB
	EXTENDED_KEY_CLR_SCR		= 0x0F50,	// non-USB
	EXTENDED_KEY_CLR_EOS		= 0x0F51,	// non-USB
	EXTENDED_KEY_CLR_EOL		= 0x0F52,	// non-USB
	EXTENDED_KEY_SCROLL_UP		= 0x0F53,	// non-USB
	EXTENDED_KEY_SCROLL_DOWN	= 0x0F54,	// non-USB
	EXTENDED_KEY_SET_TAB		= 0x0F55,	// non-USB
	EXTENDED_KEY_CLEAR_TAB		= 0x0F56,	// non-USB
	EXTENDED_KEY_CLEAR_TABS		= 0x0F57,	// non-USB

	// Auxiliary keypad
 	EXTENDED_KEY_PAD_SLASH		= 0x0054,
 	EXTENDED_KEY_PAD_ASTERISK	= 0x0055,
 	EXTENDED_KEY_PAD_MINUS		= 0x0056,
 	EXTENDED_KEY_PAD_PLUS		= 0x0057,
 	EXTENDED_KEY_PAD_ENTER		= 0x0058,
 	EXTENDED_KEY_PAD_END		= 0x0059,
 	EXTENDED_KEY_PAD_DOWN		= 0x005A,
 	EXTENDED_KEY_PAD_PAGE_DOWN	= 0x005B,
 	EXTENDED_KEY_PAD_LEFT		= 0x005C,
 	EXTENDED_KEY_PAD_CENTER		= 0x005D,
 	EXTENDED_KEY_PAD_RIGHT		= 0x005E,
 	EXTENDED_KEY_PAD_HOME		= 0x005F,
 	EXTENDED_KEY_PAD_UP		= 0x0060,
 	EXTENDED_KEY_PAD_PAGE_UP	= 0x0061,
 	EXTENDED_KEY_PAD_INSERT		= 0x0062,
 	EXTENDED_KEY_PAD_DELETE		= 0x0063,
 	EXTENDED_KEY_PAD_EQUALS		= 0x0067,
 	EXTENDED_KEY_PAD_COMMA		= 0x0085,
 	EXTENDED_KEY_PAD_EQUALS_AS400	= 0x0086,
 	EXTENDED_KEY_PAD_F1		= 0x0F01,	// non-USB
 	EXTENDED_KEY_PAD_F2		= 0x0F02,	// non-USB
 	EXTENDED_KEY_PAD_F3		= 0x0F03,	// non-USB
 	EXTENDED_KEY_PAD_F4		= 0x0F04,	// non-USB
 	EXTENDED_KEY_PAD_F5		= 0x0F05,	// non-USB

	// Application functions keypad
 	EXTENDED_KEY_APPLICATION	= 0x0065,
 	EXTENDED_KEY_EXECUTE		= 0x0074,
 	EXTENDED_KEY_HELP		= 0x0075,
 	EXTENDED_KEY_MENU		= 0x0076,
 	EXTENDED_KEY_SELECT		= 0x0077,
 	EXTENDED_KEY_STOP		= 0x0078,
 	EXTENDED_KEY_AGAIN		= 0x0079,
 	EXTENDED_KEY_UNDO		= 0x007A,
 	EXTENDED_KEY_CUT		= 0x007B,
 	EXTENDED_KEY_COPY		= 0x007C,
 	EXTENDED_KEY_PASTE		= 0x007D,
 	EXTENDED_KEY_FIND		= 0x007E,
 	EXTENDED_KEY_CANCEL		= 0x009B,
 	EXTENDED_KEY_CLEAR		= 0x009C,
 	EXTENDED_KEY_PRIOR		= 0x009D,
 	EXTENDED_KEY_RETURN		= 0x009E,
 	EXTENDED_KEY_SEPARATOR		= 0x009F,
 	EXTENDED_KEY_OUT		= 0x00A0,
 	EXTENDED_KEY_OPER		= 0x00A1,
 	EXTENDED_KEY_CLEAR_OR_AGAIN	= 0x00A2,
 	EXTENDED_KEY_PROPERTIES		= 0x00A3,	// a.k.a. "cr sel"
 	EXTENDED_KEY_EX_SEL		= 0x00A4,
	EXTENDED_KEY_MAIL		= 0x018A,
	EXTENDED_KEY_CALCULATOR		= 0x0192,
	EXTENDED_KEY_COMPUTER		= 0x0194,
	EXTENDED_KEY_WWW_SEARCH		= 0x0221,
	EXTENDED_KEY_WWW_HOME		= 0x0223,
	EXTENDED_KEY_WWW_BACK		= 0x0224,
	EXTENDED_KEY_WWW_FORWARD	= 0x0225,
	EXTENDED_KEY_WWW_STOP		= 0x0226,
	EXTENDED_KEY_WWW_REFRESH	= 0x0227,
	EXTENDED_KEY_WWW_FAVOURITES	= 0x022A,
	EXTENDED_KEY_NEXT		= 0x0F60,	// non-USB
	EXTENDED_KEY_PREVIOUS		= 0x0F61,	// non-USB
	EXTENDED_KEY_PRINT		= 0x0F62,	// non-USB
	EXTENDED_KEY_BEGIN		= 0x0F63,	// non-USB
	EXTENDED_KEY_CLOSE		= 0x0F64,	// non-USB
	EXTENDED_KEY_COMMAND		= 0x0F65,	// non-USB
	EXTENDED_KEY_CREATE		= 0x0F66,	// non-USB
	EXTENDED_KEY_EXIT		= 0x0F67,	// non-USB
	EXTENDED_KEY_MARK		= 0x0F68,	// non-USB
	EXTENDED_KEY_MESSAGE		= 0x0F69,	// non-USB
	EXTENDED_KEY_MOVE		= 0x0F6A,	// non-USB
	EXTENDED_KEY_OPEN		= 0x0F6B,	// non-USB
	EXTENDED_KEY_OPTIONS		= 0x0F6C,	// non-USB
	EXTENDED_KEY_REDO		= 0x0F6D,	// non-USB
	EXTENDED_KEY_REFERENCE		= 0x0F6E,	// non-USB
	EXTENDED_KEY_REFRESH		= 0x0F6F,	// non-USB
	EXTENDED_KEY_REPLACE		= 0x0F70,	// non-USB
	EXTENDED_KEY_RESTART		= 0x0F71,	// non-USB
	EXTENDED_KEY_RESUME		= 0x0F72,	// non-USB
	EXTENDED_KEY_SAVE		= 0x0F73,	// non-USB
	EXTENDED_KEY_SUSPEND		= 0x0F74,	// non-USB

	// System functions keypad
	EXTENDED_KEY_POWER		= 0x0001,	// USB code - 0x80
	EXTENDED_KEY_SLEEP		= 0x0002,	// USB code - 0x81
	EXTENDED_KEY_WAKE		= 0x0003,	// USB code - 0x82
 	EXTENDED_KEY_ATTENTION		= 0x009A,	// a.k.a. "system request"
 	EXTENDED_KEY_PRINT_SCREEN	= 0x0046,
 	EXTENDED_KEY_PAUSE		= 0x0048,
 	EXTENDED_KEY_KBD_POWER		= 0x0066,

	// Multimedia keypad
 	EXTENDED_KEY_MUTE		= 0x007F,
 	EXTENDED_KEY_VOLUME_UP		= 0x0080,
 	EXTENDED_KEY_VOLUME_DOWN	= 0x0081,
	EXTENDED_KEY_NEXT_TRACK		= 0x00B5,
	EXTENDED_KEY_PREV_TRACK		= 0x00B6,
	EXTENDED_KEY_STOP_PLAYING	= 0x00B7,
	EXTENDED_KEY_PLAY_PAUSE		= 0x00CD,
	EXTENDED_KEY_MUTE_PLAYER	= 0x00E2,
	EXTENDED_KEY_BASS_BOOST		= 0x00E5,
	EXTENDED_KEY_LOUDNESS		= 0x00E7,
	EXTENDED_KEY_PLAY_VOL_UP	= 0x00E9,
	EXTENDED_KEY_PLAY_VOL_DOWN	= 0x00EA,
	EXTENDED_KEY_BASS_UP		= 0x0152,
	EXTENDED_KEY_BASS_DOWN		= 0x0153,
	EXTENDED_KEY_TREBLE_UP		= 0x0154,
	EXTENDED_KEY_TREBLE_DOWN	= 0x0155,
	EXTENDED_KEY_MEDIA_SELECT	= 0x0183,

 	EXTENDED_KEY_ALTERNATE_ERASE	= 0x0099,
};

extern inline uint32_t MessageForUCS24(uint32_t c) { return INPUT_MSG_UCS24 | (c & 0x00FFFFFF); }
extern inline uint32_t MessageForExtendedKey(uint16_t k, uint8_t m) { return INPUT_MSG_EKEY | (uint32_t(k) << 8U) | uint32_t(m & 0xFF); }
extern inline uint32_t MessageForFunctionKey(uint8_t k, uint8_t m) { return INPUT_MSG_FKEY | (uint32_t(k & 0xFF) << 8U) | uint32_t(m & 0xFF); }

#endif
