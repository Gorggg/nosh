<refentry id="login-process">

<refmeta>
<refentrytitle>login-process</refentrytitle>
<manvolnum>1</manvolnum>
<refmiscinfo class="manual">user commands</refmiscinfo>
<refmiscinfo class="source">nosh</refmiscinfo>
<refmiscinfo class="version">1.23</refmiscinfo>
</refmeta>

<refnamediv>
<refname>login-process</refname>
<refpurpose>chain-load utility for recording login accounting entries in utmp/wtmp</refpurpose>
</refnamediv>

<refsynopsisdiv>
<refsection><title>MODERN BSD</title>
<cmdsynopsis>
<command>login-process</command>
<arg choice='req'><replaceable>next-prog</replaceable></arg>
</cmdsynopsis>
</refsection><refsection><title>OLD SYSTEM V</title>
<cmdsynopsis>
<command>login-process</command>
<arg>--utmp-filename <replaceable>filename</replaceable></arg>
<arg>--wtmp-filename <replaceable>filename</replaceable></arg>
<arg>--id <replaceable>id</replaceable></arg>
<arg>--getty</arg>
<arg choice='req'><replaceable>next-prog</replaceable></arg>
</cmdsynopsis>
</refsection>
</refsynopsisdiv>

<refsection><title>Description</title>

<para>
<command>login-process</command> is a chain-loading utility that is used to
record login accounting entries in the <filename>utmp</filename> and
<filename>wtmp</filename> databases, and then (if successful) chain loads to
<replaceable>next-prog</replaceable> with the
<citerefentry><refentrytitle>execvp</refentrytitle><manvolnum>3</manvolnum></citerefentry>
function.
Normally, the <replaceable>next-prog</replaceable> will be (or will eventually
chain-load)
<citerefentry><refentrytitle>login</refentrytitle><manvolnum>1</manvolnum></citerefentry>
and thus be the login process so recorded.
</para>

<para>
<replaceable>next-prog</replaceable> may contain its own command line options, which <command>login-process</command> will ignore.
</para>

<para>
<command>login-process</command> makes no alteration to process state.
</para>

<para>
The function of <command>login-process</command> is to perform the actions that
used to be performed by 
<citerefentry><refentrytitle>init</refentrytitle><manvolnum>1</manvolnum></citerefentry>
and
<citerefentry><refentrytitle>getty</refentrytitle><manvolnum>1</manvolnum></citerefentry>,
in a virtual terminal login service.
In such a service, using the nosh toolset and running under 
<citerefentry><refentrytitle>service-manager</refentrytitle><manvolnum>1</manvolnum></citerefentry>,
<citerefentry><refentrytitle>getty</refentrytitle><manvolnum>1</manvolnum></citerefentry>
is replaced by a set of simpler chain-loading tools tailored for virtual terminals
that do not have a "getty" state, and the service is not spawned by or monitored by an
<citerefentry><refentrytitle>init</refentrytitle><manvolnum>1</manvolnum></citerefentry>
program at all, so there is no real "init" state for a terminal either.
The accounting entries produced by <command>login-process</command> are thus compatibility
features at best.
</para>

<refsection><title>MODERN BSD BEHAVIOUR</title>

<para>
Modern BSD operating systems have a completely new user accounting database and
have no notion of "login" or "init" accounting entries at all
(see
<citerefentry><refentrytitle>utmpx</refentrytitle><manvolnum>3</manvolnum></citerefentry>).
There are simply no accounting database entries for terminals where no-one is
currently logged in.
The compatibility terminal statuses that <command>login-process</command>
records do not exist.
</para>

<para>
This utility effectively does nothing on such operating systems, and need not be used at all.
</para>

</refsection>

<refsection><title>OLD SYSTEM V BEHAVIOUR</title>

<para>
On old System V systems, the accounting database is described by
<citerefentry><refentrytitle>utmpx</refentrytitle><manvolnum>3</manvolnum></citerefentry>.
<command>login-process</command> writes <code>LOGIN_PROCESS</code> records in
the accounting database, or <code>INIT_PROCESS</code> records if the
<arg choice='plain'>--getty</arg> command line option is used.
(The user names are, respectively, "LOGIN" and "GETTY", although most old
System V accounting utilities won't report the actual contents of the user name
field for such record types.)
</para>

<para>
The locations of the <filename>utmp</filename> and <filename>wtmp</filename>
files are derived at compile time from a system header when the utility is
built from source.
To override them at runtime, use the <arg>--utmp-filename</arg> and <arg>--wtmp-filename</arg>
options.
</para>

<para>
It always extends <filename>wtmp</filename> with the new accounting record.
It locates a record in <filename>utmp</filename> to overwrite in the
conventional manner of the
<citerefentry><refentrytitle>pututxline</refentrytitle><manvolnum>3</manvolnum></citerefentry>
function.  
This is, roughly:
</para>
<orderedlist>
<listitem><para>
It overwrites any entry that matches its own process ID.
Such entries are, in normal operation, the results of earlier terminal "states"
being written to the accounting database by the same login service process.
</para></listitem>
<listitem><para>
Failing that, it overwrites any entry that matches its <filename>inittab</filename> ID.
<command>login-process</command> is not responsible for erasing records from <filename>utmp</filename>.
Properly that is the domain of 
<citerefentry><refentrytitle>login</refentrytitle><manvolnum>1</manvolnum></citerefentry> 
when the user's login shell terminates, although some old
<citerefentry><refentrytitle>login</refentrytitle><manvolnum>1</manvolnum></citerefentry> 
implementations do not do this, leading to <filename>utmp</filename> records
not being marked "dead" or erased.
Re-using the "undead" <filename>utmp</filename> records for dead processes
whose <filename>utmp</filename> records have not been cleaned up is why
<command>login-process</command> also matches on the
<filename>inittab</filename> ID.
</para>
</listitem>
<listitem><para>
Failing that, it unconditionally extends <filename>utmp</filename> with a new
record.
</para></listitem>
</orderedlist>

<refsection><title><filename>inittab</filename> IDs</title>

<para>
Historically, an <filename>inittab</filename> ID was the "id" field from the record
in <filename>/etc/inittab</filename> that describes the login service.
There were, of course, several problems with that design, not the least of which is
that login services were not informed what their IDs were.
The old
<citerefentry><refentrytitle>getty</refentrytitle><manvolnum>1</manvolnum></citerefentry>
and
<citerefentry><refentrytitle>login</refentrytitle><manvolnum>1</manvolnum></citerefentry>
programs had to derive the ID from the terminal line name, the datum that they
<emphasis>were</emphasis> supplied, and the ID was thus strongly tied to the
terminal line name, causing problems if <filename>inittab</filename> did not
have the same ID.
</para>

<para>
<command>login-process</command> derives the <filename>inittab</filename> ID in
the same way, determining it from the <filename>utmp</filename> terminal line
name, unless forcibly overridden with the <arg choice='plain'>--id</arg>
command option.
The <filename>utmp</filename> terminal line name in turn is simply the name of
the controlling TTY name with any "<code>/dev/</code>" or
"<code>/run/dev/</code>" stripped.
The controlling TTY name is determined from the value of the <envar>TTY</envar>
environment variable, if present.
This will be the case if <command>login-process</command> has been invoked within a chain
that has run 
<citerefentry><refentrytitle>vc-get-tty</refentrytitle><manvolnum>1</manvolnum></citerefentry>,
<citerefentry><refentrytitle>pty-get-tty</refentrytitle><manvolnum>1</manvolnum></citerefentry>,
or an equivalent 
<citerefentry><refentrytitle>getty</refentrytitle><manvolnum>1</manvolnum></citerefentry>
program.
If the environment variable is absent, the 
<citerefentry><refentrytitle>ttyname</refentrytitle><manvolnum>3</manvolnum></citerefentry>
library function is called.
</para>

<para>
When determining the <filename>inittab</filename> ID from the
<filename>utmp</filename> terminal line name:
</para>
<orderedlist>
<listitem><para>
If the terminal line name begins with "<code>tty</code>", "<code>tts</code>", 
"<code>pts</code>", or "<code>pty</code>" the ID is the remainder of the string.
(So "<code>pts/5</code>" becomes "<code>/5</code>" and "<code>tty5</code>" becomes "<code>5</code>".)
</para></listitem>
<listitem><para>
If the terminal line name begins with "<code>vc</code>" and ends with "<code>/tty</code>", 
as is conventionally the case with user-space virtual terminals,
the ID is the string less the "<code>/tty</code>" suffix.
(So "<code>vc1/tty</code>" becomes "<code>vc1</code>".)
</para></listitem>
<listitem><para>
Otherwise the ID is the string.
(So "<code>vty/5</code>" remains "<code>vty/5</code>".)
</para></listitem>
</orderedlist>
<para>
In an ideal world, the last would be the sole mechanism.
This complicated song and dance is for compatibility with other programs that write to the
accounting database, in particular X Window System terminal emulators that also use
pseudo-terminals.
</para>

</refsection>
<refsection><title>Security</title>

<para>
The program requires permission to read and write to <filename>utmp</filename> and append (write) to <filename>wtmp</filename>.
Lack of permission will result in the program aborting with an error.
</para>

</refsection>

</refsection></refsection><refsection><title>Author</title><para>Jonathan de Boyne Pollard</para></refsection>

</refentry>
